#!/usr/bin/env python3
"""
Complete Analysis Pipeline - Uses all components to analyze and update CATS
"""

import os
import sys
import logging
from typing import Dict, Any, Optional
from datetime import datetime

sys.path.append('/home/gotime2022/recruitment_ops')
from catsone.integration.cats_integration import CATSClient
from catsone.processors.vision_questionnaire_analyzer import VisionQuestionnaireAnalyzer
from catsone.processors.gemini_helper import GeminiHelper

logger = logging.getLogger(__name__)

class CompleteAnalysisPipeline:
    """Run complete analysis and update CATS"""
    
    def __init__(self):
        self.cats = CATSClient()
        self.gemini_key = os.getenv('GEMINI_API_KEY')
        self.vision_analyzer = VisionQuestionnaireAnalyzer(self.gemini_key)
        self.gemini = GeminiHelper(self.gemini_key)
    
    def analyze_and_update(self, candidate_id: int, questionnaire_path: str = None) -> Dict[str, Any]:
        """Run complete analysis and update CATS"""
        
        # Get candidate info
        candidate = self.cats.get_candidate_details(candidate_id)
        if not candidate:
            return {'error': 'Candidate not found'}
        
        candidate_name = f"{candidate.get('first_name')} {candidate.get('last_name')}"
        
        # Run questionnaire analysis if path provided
        questionnaire_analysis = None
        if questionnaire_path and os.path.exists(questionnaire_path):
            logger.info("Running questionnaire analysis...")
            questionnaire_analysis = self.vision_analyzer.analyze_questionnaire_images(questionnaire_path)
        
        # Generate comprehensive notes
        notes = self._generate_notes(candidate_id, candidate_name, questionnaire_analysis)
        
        # Update CATS
        success = self.cats.update_candidate_notes(candidate_id, notes)
        
        return {
            'candidate_id': candidate_id,
            'candidate_name': candidate_name,
            'cats_updated': success,
            'notes': notes
        }
    
    def _generate_notes(self, candidate_id: int, candidate_name: str, 
                       questionnaire_analysis: Optional[Dict] = None) -> str:
        """Generate comprehensive CATS notes"""
        
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
        
        notes = f"""COMPREHENSIVE CANDIDATE ANALYSIS - ENHANCED EQUIPMENT FOCUS
============================================================

Candidate: {candidate_name} (ID: {candidate_id})
Analysis Date: {timestamp}
Analysis Method: Enhanced Vision AI with Complete Equipment Extraction
"""
        
        if questionnaire_analysis and 'error' not in questionnaire_analysis:
            profile = questionnaire_analysis.get('candidate_profile', {})
            equipment = profile.get('equipment_analysis', {})
            responses = profile.get('actual_responses', {})
            
            # Equipment Analysis Section
            notes += f"""
EQUIPMENT EXPERIENCE ANALYSIS:
------------------------------
BRANDS ON QUESTIONNAIRE:
Available Options: {', '.join(equipment.get('brands_available', [])) or 'None found'}
Brands Selected: {', '.join(equipment.get('brands_selected', [])) or 'NONE SELECTED'}
Brand Experience Gaps: {', '.join(equipment.get('equipment_gaps', [])) or 'None'}

EQUIPMENT TYPES:
Selected Types: {', '.join(equipment.get('equipment_types_selected', [])) or 'None'}
"""
            
            # Key responses
            notes += "\nKEY QUESTIONNAIRE RESPONSES:\n"
            notes += "-" * 30 + "\n"
            
            # Look for specific equipment questions
            for key, response in responses.items():
                question = response.get('question', '')
                
                # Equipment-specific questions
                if any(term in question.lower() for term in ['komatsu', 'equipment', 'machinery', 'brand']):
                    notes += f"\n{question}\n"
                    if response.get('all_options'):
                        notes += f"  Options: {', '.join(response['all_options'])}\n"
                    notes += f"  Selected: {', '.join(response.get('selections', [])) or 'None'}\n"
                    if response.get('text'):
                        notes += f"  Details: {', '.join(response['text'])}\n"
        
        notes += f"""
ANALYSIS SUMMARY:
----------------
This enhanced analysis extracts ALL equipment options from the questionnaire,
not just selected ones, providing complete visibility into candidate's 
equipment experience gaps.

Generated by: AI-Powered Recruitment Analysis System
============================================================"""
        
        return notes


def run_pipeline(candidate_id: int, questionnaire_path: str = None):
    """Convenience function to run the pipeline"""
    
    pipeline = CompleteAnalysisPipeline()
    result = pipeline.analyze_and_update(candidate_id, questionnaire_path)
    
    if result.get('cats_updated'):
        print(f"✅ Successfully updated CATS for {result['candidate_name']}")
        print("\nNotes updated in CATS:")
        print("-" * 60)
        print(result['notes'])
    else:
        print(f"❌ Failed to update CATS: {result.get('error', 'Unknown error')}")
    
    return result


if __name__ == "__main__":
    # Run for Gaétan
    run_pipeline(
        candidate_id=399702647,
        questionnaire_path='/home/gotime2022/recruitment_ops/questionnaire_images'
    )